!<arch>
0-isupper.c/    0           0     0     644     229       `
#include "main.h"

/**
 * _isupper - Check fo lower case character.
 * @c: the character to be checked.
 * Return: 1 for upper case or 0 for other.
 */

int _isupper(int c)
{
if (c >= 65 && c <= 90)
{
return (1);
}
return (0);
}

0-memset.c/     0           0     0     644     317       `
#include "main.h"

/**
* char *_memset - fills memory with a constant byte.
* @s: memory to be ffiilled.
* @b: char to copy.
* @n: number of files to copy.
* Return: pointer to the memory area s.
*/

char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
s[i] = b;
}
return (s);
}

0-strcat.c/     0           0     0     644     158       `
#include "main.h"

/**
 * *_strcat - function concatente strings
 * @dest: char
 * @src:  string
 * Return: 0
 */

char *_strcat(char *dest, char *src)
{

}

100-atoi.c/     0           0     0     644     476       `
#include "main.h"

/**
* _atoi -  convert string to an integer.
* @s: input string.
* Return: integer.
*/

int _atoi(char *s)
{
	unsigned int count = 0, size = 0, oi = 0;
        unsigned int pn = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;

		if (*(s + count) == '-')
			pn *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
			m *= 10;
			size++;
		}
		count++;
	}
}
1-isdigit.c/    0           0     0     644     218       `
#include "main.h"

/**
 * _isdigit - Check for digit number.
 * @c: the character to be checked.
 * Return: 1 for digit or 0 for other .
 */

int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
return (0);
}
1-memcpy.c/     0           0     0     644     327       `
#include "main.h"

/**
* char *_memcpy - function copies the bytes from memory.
* @src: files from memory area.
* @dest: to memory area.
* @n: function copies.
* Return: a pointer to @dest.
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i = 0;
while (i < n)
{
dest[i] = src[i];
i++;
}
return (dest);
}

1-strncat.c/    0           0     0     644     177       `
#include "main.h"

/**
 * *_strcat - function concatente strings
 * @dest: char
 * @src:  string
 * @n: int
 * Return: 0
 */

char *_strncat(char *dest, char *src, int n)
{

}


2-strchr.c/     0           0     0     644     366       `
#include "main.h"

/**
* _strchr - locate acharacter into string.
* @s: the string to be searched.
* @c: the character to be located.
* Return: if c is found a pointer to the first occurence.
* if not found NULL.
*/

char *_strchr(char *s, char c)
{
int index;

for (index  = 0; s[index] >= '\0'; index++)
{
if (s[index] == c)
return (s + index);
}
return ('\0');
}
2-strlen.c/     0           0     0     644     234       `
#include "main.h"

/**
* _strlen - check string.
* @s: string to be checked.
* Return: The length of string..
*/

int _strlen(char *s)
{
	int string_length = 0;

	while (s[string_length])
		string_length++;
	return (string_length);
}
3-islower.c/    0           0     0     644     132       `
#include "main.h"

/**
* _islower -  convert string to lower case.
* @c: input int.
* Return: integer.
*/

int _islower(int c)
{

}
3-puts.c/       0           0     0     644     245       `
#include "main.h"

/**
* _puts - prints a string, followed by a new line.
* @str: Pointer to the string.
* Return: String and new line.
*/

void _puts(char *str)
{
	int i = 0;

	while (str[i])
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     129       `
/**
 * _strcmp - function concatente strings
 * @s1: char
 * @s2:  string
 * Return: 0
 */

int _strcmp(char *s1, char *s2)
{

}

3-strspn.c/     0           0     0     644     469       `
#include "main.h"

/**
* _strspn - get the length of the prefix substring.
* @s: the string to be searched.
* @accept: the prefix to be measured.
* Return:  the number of byte in s which.
* consist only of bytes from accept.
*/

unsigned int _strspn(char *s, char *accept)
{
unsigned int bytes = 0;
int index;

while (*s)
{
for (index = 0; accept[index]; index++)
{
if (*s == accept[index])
{
bytes++;
break;
}
else if (accept[index + 1] == '\0')
return (bytes);
}
}
}

4-isalpha.c/    0           0     0     644     241       `
#include "main.h"

/**
 * _isalpha - print alphabet character
 * @c: character to paste
 * Return: 1 if c is a letter or 0 otherwise
 */

int _isalpha(int c)
{
if ((c >= 65 && c <= 97) || (c >= 97 && c <= 122))
{
return (1);
}
return (0);
}

4-strpbrk.c/    0           0     0     644     425       `
#include "main.h"

/**
* _strpbrk - search string for any of the set of bytes.
* @s: the string to be searched.
* @accept: the set of bytes to be seearched for.
* Return: if the set is matched apointer to the matched .
* if no set is matched to NULL.
*/

char *_strpbrk(char *s, char *accept)
{
int index;

while (*s)
{
for (index = 0; accept[index]; index++)
{
if (*s == accept[index])
return (s);
}
s++;
}
return ('\0');
}

5-strstr.c/     0           0     0     644     540       `
#include "main.h"

/**
* _strstr - locate a substring.
* @haystack: the string to be searched.
* @needle: the ssubstring to be located.
* Return: if the substring is located a pointer to the beginning .
* or the located substring.
*/

char *_strstr(char *haystack, char *needle)
{
int index;

if (needle == 0)
return (haystack);
while (haystack)
{
index = 0;
if (haystack[index] == needle[index])
{
do {
if (needle[index + 1] == '\0')
return (haystack);
index++;
} while (haystack[index] == needle[index]);
}
haystack++;
}
return ('\0');
}
6-abs.c/        0           0     0     644     271       `
#include "main.h"

/**
 * _abs - Compute the absolute value of an integer.
 * @c: The number to be computed.
 * Return: Absolute value of number or zero.
 */

int _abs(int c)
{

		if (c < 0)
		{
		int abs_val;

		abs_val = c * -1;
		return (abs_val);
		}
		return (c);
}

9-strcpy.c/     0           0     0     644     289       `
#include "main.h"

/**
* *_strcpy -  copies the string pointed to by src.
* @dest: char type string.
* @src: char type string.
* Return: pointer to dest.
*/

char *_strcpy(char *dest, char *src)
{
	int z = -1;

	do {
		z++;
		dest[z] = src[z];
	} while (src[z] != '\0');
	return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

